"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeguardMutationProtobufRequest = exports.isMutationRequest = exports.getErrorLocationPath = exports.getFieldMask = exports.convertPathToCamelCase = exports.convertToProtoFormat = exports.formatCallResults = exports.promisifyServiceClient = void 0;
const protobufHelpers = __importStar(require("google-protobuf/google/protobuf/field_mask_pb"));
const lodash_camelcase_1 = __importDefault(require("lodash.camelcase"));
const lodash_get_1 = __importDefault(require("lodash.get"));
const lodash_set_1 = __importDefault(require("lodash.set"));
const structs = __importStar(require("./struct"));
const NON_MUTABLE_METHOD_PREFIXES = ["Get", "List", "Generate", "Search"];
// Based on https://github.com/leaves4j/grpc-promisify/blob/master/src/index.js
function promisifyServiceClient(client) {
    Object.keys(Object.getPrototypeOf(client)).forEach((functionName) => {
        if (functionName.charAt(0) === "$" || functionName.charAt(0) === "_") {
            return;
        }
        const originalFunction = client[functionName];
        client[functionName] = (request, callback) => {
            if (callback && typeof callback === "function") {
                return originalFunction.call(client, request, (error, response) => {
                    callback(error, response);
                });
            }
            return new Promise((resolve, reject) => {
                originalFunction.call(client, request, (error, response) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(response);
                    }
                });
            });
        };
    });
}
exports.promisifyServiceClient = promisifyServiceClient;
function getNestedValue(path, data) {
    var _a;
    const value = (_a = lodash_get_1.default(data, path)) !== null && _a !== void 0 ? _a : lodash_get_1.default(data, `${path}List`);
    const typeOfValue = typeof value;
    if (typeOfValue === "undefined") {
        return value;
    }
    // Return raw values
    if (typeOfValue === "number" || typeOfValue === "string" || typeOfValue === "boolean") {
        return value;
    }
    // Get value from google.protobuf { value } objects
    const isValue = typeOfValue === "object"
        ? value.hasOwnProperty("value") && Object.keys(value).length === 1
        : false;
    if (isValue) {
        return value.value;
    }
    // Recursively get values from arrays
    if (Array.isArray(value)) {
        const childRows = [];
        for (const childRow of value) {
            const newRow = {};
            const childKeys = Object.keys(childRow);
            for (const childKey of childKeys) {
                const newChildVal = getNestedValue(childKey, childRow);
                if (childKey === "value" && childKeys.length === 1) {
                    childRows.push(newChildVal);
                }
                else {
                    newRow[childKey] = newChildVal;
                }
            }
            if (Object.keys(newRow).length !== 0) {
                childRows.push(newRow);
            }
        }
        return childRows;
    }
    // Recursively get values from objects
    const childObj = {};
    for (const childKey in value) {
        if (value.hasOwnProperty(childKey)) {
            const childValue = getNestedValue(childKey, value);
            if (Array.isArray(childValue) && childKey.endsWith("List")) {
                childObj[childKey.replace("List", "")] = childValue;
            }
            else {
                childObj[childKey] = childValue;
            }
        }
    }
    return childObj;
}
function formatCallResults(resultsList, fieldMask) {
    const len = resultsList.length;
    const camelCaseFieldMask = fieldMask ? fieldMask.pathsList.map(convertPathToCamelCase) : [];
    const fieldMaskLen = camelCaseFieldMask.length;
    const parsedResults = [];
    for (let i = 0; i < len; i++) {
        const row = resultsList[i];
        const parsedRow = {};
        for (let j = 0; j < fieldMaskLen; j++) {
            const path = camelCaseFieldMask[j];
            const value = getNestedValue(path, row);
            // Get the resource name of the entity
            const entity = path.split(".")[0];
            const resourceNameField = `${entity}.resourceName`;
            const resourceNameExistsOriginal = lodash_get_1.default(row, resourceNameField);
            const resourceNameExists = lodash_get_1.default(parsedRow, resourceNameField);
            // Set the resource name if required
            if (!resourceNameExists && resourceNameExistsOriginal) {
                const resourceName = lodash_get_1.default(row, resourceNameField);
                lodash_set_1.default(parsedRow, resourceNameField, resourceName);
            }
            if (typeof value !== "undefined") {
                lodash_set_1.default(parsedRow, formatPath(path, value), value);
            }
        }
        parsedResults.push(parsedRow);
    }
    return parsedResults;
}
exports.formatCallResults = formatCallResults;
function formatPath(path, value) {
    if (path.endsWith(".value")) {
        return path.split(".value")[0];
    }
    if (path.endsWith("List") && Array.isArray(value)) {
        return path.split("List")[0];
    }
    return path;
}
function convertToProtoFormat(data, type, resource_name, nested_path = "") {
    const pb = {};
    const struct = structs[resource_name];
    if (!struct) {
        throw new Error(`Key "${nested_path.replace(".", "")}" not found in resource "${resource_name}"`);
    }
    for (const key of Object.keys(data)) {
        const displayKey = lodash_camelcase_1.default(key);
        const value = data[key];
        /* Resource names are string values, not a protobuf string instance, so just set the string value */
        if (displayKey === "resourceName") {
            pb[displayKey] = value;
            continue;
        }
        /* Build array of proto values */
        if (Array.isArray(value)) {
            pb[displayKey] = value.map((v) => {
                return unroll(v);
            });
            continue;
        }
        pb[displayKey] = unroll(value);
        function unroll(v) {
            return typeof v === "object"
                ? convertToProtoFormat(v, type, resource_name, `${nested_path}.${key}`)
                : toProtoValueFormat(v, struct, `${nested_path}.${key}`.replace(".", ""));
        }
    }
    return pb;
}
exports.convertToProtoFormat = convertToProtoFormat;
function toProtoValueFormat(value, struct, nested_path) {
    const valueType = lodash_get_1.default(struct, nested_path);
    if (!valueType) {
        throw new Error(`Attempted to set value "${value}" on invalid path "${nested_path}" in resource`);
    }
    if (valueType.startsWith("enum_")) {
        return value;
    }
    return {
        value,
    };
}
/* This is different to lodash.camelCase as it leaves any periods (".") */
function convertPathToCamelCase(str) {
    return str.replace(/([-_][a-z\d])/gi, $1 => {
        return $1
            .toUpperCase()
            .replace("-", "")
            .replace("_", "");
    });
}
exports.convertPathToCamelCase = convertPathToCamelCase;
function recursiveFieldMaskSearch(data) {
    const paths = [];
    for (const key of Object.keys(data)) {
        if (key === "resource_name") {
            continue;
        }
        const value = data[key];
        if (typeof value === "object" && !Array.isArray(value)) {
            const children = recursiveFieldMaskSearch(value);
            for (const child of children) {
                paths.push(`${key}.${child}`);
            }
            continue;
        }
        paths.push(key);
    }
    return paths;
}
function getFieldMask(data) {
    const fieldMask = new protobufHelpers.FieldMask();
    const paths = recursiveFieldMaskSearch(data);
    fieldMask.setPathsList(paths);
    return fieldMask;
}
exports.getFieldMask = getFieldMask;
function getErrorLocationPath(location) {
    if (!location || !location.hasOwnProperty("fieldPathElementsList")) {
        return "";
    }
    if (!Array.isArray(location.fieldPathElementsList) && location.fieldPathElementsList.length < 1) {
        return "";
    }
    const { fieldPathElementsList } = location;
    const paths = fieldPathElementsList.map((field) => {
        let path = field.fieldName;
        if (field.index && field.index.hasOwnProperty("value")) {
            path += `[${field.index.value}]`;
        }
        return path;
    });
    return paths.join(".");
}
exports.getErrorLocationPath = getErrorLocationPath;
function isMutationRequest(interceptMessage) {
    var _a;
    let isMutation = true;
    if ((_a = interceptMessage === null || interceptMessage === void 0 ? void 0 : interceptMessage.method_definition) === null || _a === void 0 ? void 0 : _a.path) {
        const { path } = interceptMessage.method_definition;
        for (const prefix of NON_MUTABLE_METHOD_PREFIXES) {
            if (path.includes(prefix)) {
                isMutation = false;
                break;
            }
        }
    }
    return isMutation;
}
exports.isMutationRequest = isMutationRequest;
function safeguardMutationProtobufRequest(message, next) {
    // Force validation only for requests if the setValidateOnly method exists
    if (message === null || message === void 0 ? void 0 : message.setValidateOnly) {
        message.setValidateOnly(true);
        next(message);
        // If the request doesn't support validateOnly, we attempt to clear the operations list
    }
    else if (message === null || message === void 0 ? void 0 : message.clearOperationsList) {
        message.clearOperationsList();
        next(message);
        // Some request operations are called mutate_operations
    }
    else if (message === null || message === void 0 ? void 0 : message.clearMutateOperationsList) {
        message.clearMutateOperationsList();
        next(message);
    }
    else {
        // Otherwise, we just give up to prevent any unwanted mutations (this throws an error, shouldn't happen)
        throw new Error(`Prevent mutations mode is enabled, but the request couldn't be safeguarded, giving up.`);
    }
}
exports.safeguardMutationProtobufRequest = safeguardMutationProtobufRequest;
//# sourceMappingURL=data:application/json;base64,