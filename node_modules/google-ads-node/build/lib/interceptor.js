"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingInterceptor = exports.PreventMutationsInterceptor = exports.ResponseParsingInterceptor = exports.ExceptionInterceptor = exports.MetadataInterceptor = void 0;
const grpc_1 = __importDefault(require("grpc"));
const logger_1 = require("./logger");
const types_1 = require("./types");
const utils_1 = require("./utils");
const FAILURE_KEY = "google.ads.googleads.v3.errors.googleadsfailure-bin";
const REQUEST_ID_KEY = "request-id";
const RETRY_STATUS_CODES = [grpc_1.default.status.INTERNAL, grpc_1.default.status.RESOURCE_EXHAUSTED];
class MetadataInterceptor {
    constructor(developer_token, login_customer_id, access_token, auth) {
        this.developer_token = developer_token;
        this.login_customer_id = login_customer_id;
        this.access_token = access_token;
        this.auth = auth;
        this.requestInterceptor = this.buildRequester();
    }
    intercept(options, nextCall) {
        return new grpc_1.default.InterceptingCall(nextCall(options), this.requestInterceptor);
    }
    buildRequester() {
        return new grpc_1.default.RequesterBuilder()
            .withStart(async (metadata, listener, next) => {
            const access_token = this.auth ? await this.auth.getAccessToken() : this.access_token;
            metadata.add(`Authorization`, `Bearer ${access_token}`);
            metadata.add(`developer-token`, this.developer_token);
            if (this.login_customer_id) {
                metadata.add(`login-customer-id`, this.login_customer_id);
            }
            next(metadata, listener);
        })
            .build();
    }
}
exports.MetadataInterceptor = MetadataInterceptor;
class ExceptionInterceptor {
    constructor() {
        this.requestInterceptor = this.buildRequester();
    }
    intercept(options, nextCall) {
        return new grpc_1.default.InterceptingCall(nextCall(options), this.requestInterceptor);
    }
    handleGrpcFailure(status) {
        const { code, metadata } = status;
        if (RETRY_STATUS_CODES.includes(code)) {
            /* Throw error if code one of INTERNAL or RESOURCE_EXHAUSTED */
            return new Error(status.details);
        }
        const gaFailure = this.getGoogleAdsFailure(metadata);
        if (!gaFailure) {
            /* Throw error with status details if not a Google Ads API error */
            return new Error(status.details);
        }
        const requestId = this.getRequestId(metadata);
        let error;
        const errorsList = gaFailure.getErrorsList();
        if (errorsList && errorsList.length > 0) {
            const firstError = errorsList[0];
            const firstErrorObj = firstError.toObject();
            let path = "";
            if (firstErrorObj.hasOwnProperty("location")) {
                path = utils_1.getErrorLocationPath(firstErrorObj.location);
            }
            return new ClientError(firstErrorObj.message, requestId, gaFailure, path);
        }
        try {
            /* Try to parse the error */
            const errorPieces = gaFailure.toString().split(",");
            const errorMessage = errorPieces[errorPieces.length - 1];
            error = new ClientError(errorMessage, requestId, gaFailure);
        }
        catch (err) {
            /* Use the original error message if parsing fails */
            error = new ClientError(status.details, requestId, gaFailure);
        }
        return error;
    }
    buildRequester() {
        return new grpc_1.default.RequesterBuilder()
            .withStart((metadata, _listener, next) => {
            const newListener = this.buildListener();
            next(metadata, newListener);
        })
            .build();
    }
    buildListener() {
        return new grpc_1.default.ListenerBuilder()
            .withOnReceiveStatus((status, next) => {
            if (status.code !== grpc_1.default.status.OK) {
                // TODO: Throw this error instead of returning a new status?
                const error = this.handleGrpcFailure(status);
                if (error.hasOwnProperty("error_code")) {
                    // @ts-ignore Custom error field "error_code"
                    status.metadata.add("error-code", JSON.stringify(error.error_code));
                }
                if (error.hasOwnProperty("location")) {
                    // @ts-ignore Custom error field "location"
                    status.metadata.add("location", error.location);
                }
                const errorStatus = new grpc_1.default.StatusBuilder()
                    .withCode(status.code)
                    .withDetails(error.message)
                    .withMetadata(status.metadata)
                    .build();
                next(errorStatus);
            }
            else {
                next(status);
            }
        })
            .build();
    }
    getGoogleAdsFailure(metadata) {
        if (!metadata) {
            return null;
        }
        for (const key in metadata.getMap()) {
            if (key === FAILURE_KEY) {
                const message = metadata.get(key);
                try {
                    const failure = types_1.GoogleAdsFailure.deserializeBinary(message[0]);
                    return failure;
                }
                catch (err) {
                    return null;
                }
            }
        }
        return null;
    }
    getRequestId(metadata) {
        if (metadata.get(REQUEST_ID_KEY)) {
            return metadata.get(REQUEST_ID_KEY)[0];
        }
        return "";
    }
}
exports.ExceptionInterceptor = ExceptionInterceptor;
class ResponseParsingInterceptor {
    constructor() {
        this.requestInterceptor = this.buildRequester();
    }
    intercept(options, nextCall) {
        return new grpc_1.default.InterceptingCall(nextCall(options), this.requestInterceptor);
    }
    buildRequester() {
        return new grpc_1.default.RequesterBuilder()
            .withStart((metadata, _listener, next) => {
            const newListener = this.buildListener();
            next(metadata, newListener);
        })
            .build();
    }
    buildListener() {
        return new grpc_1.default.ListenerBuilder()
            .withOnReceiveStatus((status, next) => {
            next(status);
        })
            .withOnReceiveMessage((message, next) => {
            var _a;
            if (message && message.toObject) {
                let results = message.toObject();
                if (results.partialFailureError && results.partialFailureError.detailsList) {
                    const errors = [];
                    const failure = types_1.GoogleAdsFailure.deserializeBinary(results.partialFailureError.detailsList[0].value);
                    const errorsList = failure.getErrorsList();
                    for (const error of errorsList) {
                        errors.push(error.toObject());
                    }
                    // detailsList -> details
                    if (results.partialFailureError.detailsList) {
                        results.partialFailureError.details = results.partialFailureError.detailsList;
                        delete results.partialFailureError.detailsList;
                    }
                    // @ts-ignore Errors is similar to GoogleAdsRow type
                    results.partialFailureError.errors = utils_1.formatCallResults(errors, {
                        pathsList: ["error_code", "message", "trigger", "location", "details"],
                    });
                    // mutateOperationResponsesList -> mutateOperationResponses
                    if (results.mutateOperationResponsesList) {
                        results.mutateOperationResponses = results.mutateOperationResponsesList;
                        delete results.mutateOperationResponsesList;
                    }
                }
                /*
                    When retrieving a single entity via a service (e.g. CampaignService), the API
                    returns a single object, instead of an array
                */
                const results_to_parse = results.resultsList ? results.resultsList : [results];
                if ((results_to_parse === null || results_to_parse === void 0 ? void 0 : results_to_parse.length) > 0) {
                    const fieldMask = (_a = results.fieldMask) !== null && _a !== void 0 ? _a : utils_1.getFieldMask(results_to_parse[0]).toObject();
                    const parsedResults = utils_1.formatCallResults(results_to_parse, fieldMask);
                    if (parsedResults && results.resultsList) {
                        results.resultsList = parsedResults;
                    }
                    /* Return an object if it's a single entity via a service */
                    if (!results.partialFailureError && parsedResults && !results.resultsList) {
                        results = parsedResults[0];
                    }
                }
                // Parse the summary row if it exists
                if (results.summaryRow && typeof results.summaryRow !== "undefined") {
                    const parsedSummaryRow = utils_1.formatCallResults([results.summaryRow], results.fieldMask);
                    if (parsedSummaryRow && parsedSummaryRow.length >= 0) {
                        results.summaryRow = parsedSummaryRow[0];
                    }
                }
                next(results);
            }
            else {
                next(message);
            }
        })
            .build();
    }
}
exports.ResponseParsingInterceptor = ResponseParsingInterceptor;
class PreventMutationsInterceptor {
    constructor() {
        this.requestInterceptor = this.buildRequester();
        this.blankInterceptor = buildBlankInterceptor();
    }
    intercept(options, nextCall) {
        if (utils_1.isMutationRequest(options)) {
            return new grpc_1.default.InterceptingCall(nextCall(options), this.requestInterceptor);
        }
        return new grpc_1.default.InterceptingCall(nextCall(options), this.blankInterceptor);
    }
    buildRequester() {
        return new grpc_1.default.RequesterBuilder()
            .withSendMessage((message, next) => {
            utils_1.safeguardMutationProtobufRequest(message, next);
        })
            .build();
    }
}
exports.PreventMutationsInterceptor = PreventMutationsInterceptor;
class LoggingInterceptor {
    constructor(options) {
        this.requestInterceptor = this.buildRequester();
        this.responseListener = this.buildListener();
        this.logger = new logger_1.Logger(options);
    }
    intercept(options, nextCall) {
        const method = options.method_definition.path;
        this.logger.setRequestMethod(method);
        if (utils_1.isMutationRequest(options)) {
            this.logger.setRequestIsMutation();
        }
        return new grpc_1.default.InterceptingCall(nextCall(options), this.requestInterceptor);
    }
    buildRequester() {
        return new grpc_1.default.RequesterBuilder()
            .withStart((metadata, _listener, next) => {
            const md = metadata.getMap();
            this.logger.setRequestHeaders(md);
            next(metadata, this.responseListener);
        })
            .withSendMessage((message, next) => {
            const request = message.toObject();
            this.logger.setRequestBody(request);
            this.logger.setStartTs();
            next(message);
        })
            .build();
    }
    buildListener() {
        return new grpc_1.default.ListenerBuilder()
            .withOnReceiveMetadata((metadata, next) => {
            const md = metadata.getMap();
            this.logger.setResponseHeaders(md);
            next(metadata);
        })
            .withOnReceiveMessage((message, next) => {
            if (message === null || message === void 0 ? void 0 : message.toObject) {
                const response = message.toObject();
                this.logger.setResponseBody(response);
            }
            next(message);
        })
            .withOnReceiveStatus((status, next) => {
            this.logger.setEndTs();
            if ((status === null || status === void 0 ? void 0 : status.code) !== grpc_1.default.status.OK) {
                const errorInterceptor = new ExceptionInterceptor();
                const error = errorInterceptor.handleGrpcFailure(status);
                this.logger.setResponseStatus(error.stack);
            }
            else {
                this.logger.setResponseStatus(status);
            }
            this.logger.log();
            next(status);
        })
            .build();
    }
}
exports.LoggingInterceptor = LoggingInterceptor;
class ClientError extends Error {
    constructor(message, requestId, failure, path) {
        super(message);
        this.message = message;
        this.location = path || "";
        this.request_id = requestId;
        this.failure = failure;
        if (failure.getErrorsList() && failure.getErrorsList().length > 0) {
            const errorCode = failure.getErrorsList()[0].getErrorCode();
            this.error_code = errorCode.toObject();
        }
        else {
            this.error_code = {};
        }
    }
}
function buildBlankInterceptor() {
    return new grpc_1.default.RequesterBuilder().build();
}
//# sourceMappingURL=data:application/json;base64,