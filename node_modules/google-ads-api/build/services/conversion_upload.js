"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc = __importStar(require("google-ads-node"));
const service_1 = __importDefault(require("./service"));
class ConversionAdjustmentUploadService extends service_1.default {
    uploadCallConversions(conversions, options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const protobufs = this.buildResources('CallConversion', conversions);
            const request = new grpc.UploadCallConversionsRequest();
            request.setCustomerId(this.cid);
            request.setConversionsList(protobufs);
            if ((_a = options) === null || _a === void 0 ? void 0 : _a.validate_only) {
                request.setValidateOnly(options.validate_only);
            }
            if ((_b = options) === null || _b === void 0 ? void 0 : _b.partial_failure) {
                request.setPartialFailure(options.partial_failure);
            }
            const response = yield this.serviceCall('uploadCallConversions', request, true);
            return response;
        });
    }
    uploadClickConversions(conversions, options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const protobufs = this.buildResources('ClickConversion', conversions);
            const request = new grpc.UploadClickConversionsRequest();
            request.setCustomerId(this.cid);
            request.setConversionsList(protobufs);
            if ((_a = options) === null || _a === void 0 ? void 0 : _a.validate_only) {
                request.setValidateOnly(options.validate_only);
            }
            if ((_b = options) === null || _b === void 0 ? void 0 : _b.partial_failure) {
                request.setPartialFailure(options.partial_failure);
            }
            const response = yield this.serviceCall('uploadClickConversions', request, true);
            return response;
        });
    }
}
exports.default = ConversionAdjustmentUploadService;
