"use strict";
// manual_mode: This file has been manually modified and should not be touched by generate_services.js
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const google_ads_node_1 = require("google-ads-node");
const service_1 = __importDefault(require("./service"));
/**
 * @constants
 */
const RESOURCE_URL_NAME = 'recommendations';
const GET_METHOD = 'getRecommendation';
const GET_REQUEST = 'GetRecommendationRequest';
class RecommendationService extends service_1.default {
    get(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.serviceGet({
                request: GET_REQUEST,
                resource: `${RESOURCE_URL_NAME}/${id}`,
                method: GET_METHOD,
                entity_id: id,
            });
        });
    }
    list(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getListResults('recommendation', options);
        });
    }
    applyRecommendation(resourceName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new google_ads_node_1.ApplyRecommendationRequest();
            request.setCustomerId(this.cid);
            if (resourceName instanceof Array) {
                const operations = resourceName.map(name => {
                    const operation = new google_ads_node_1.ApplyRecommendationOperation();
                    operation.setResourceName(name);
                    return operation;
                });
                request.setOperationsList(operations);
            }
            else {
                const operation = new google_ads_node_1.ApplyRecommendationOperation();
                operation.setResourceName(resourceName);
                request.setOperationsList([operation]);
            }
            if (options && options.hasOwnProperty('partial_failure')) {
                if (!request.setPartialFailure) {
                    throw new Error(`This method does not support the partial_failure option.`);
                }
                request.setPartialFailure(options.partial_failure);
            }
            const response = yield this.service.applyRecommendation(request);
            return {
                request: request.toObject(),
                partial_failure_error: response.partialFailureError,
                results: response.resultsList.map(r => r.resourceName),
            };
        });
    }
    dismissRecommendation(resourceName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new google_ads_node_1.DismissRecommendationRequest();
            request.setCustomerId(this.cid);
            if (resourceName instanceof Array) {
                const operations = resourceName.map(name => {
                    const operation = new google_ads_node_1.DismissRecommendationRequest.DismissRecommendationOperation();
                    operation.setResourceName(name);
                    return operation;
                });
                request.setOperationsList(operations);
            }
            else {
                const operation = new google_ads_node_1.DismissRecommendationRequest.DismissRecommendationOperation();
                operation.setResourceName(resourceName);
                request.setOperationsList([operation]);
            }
            if (options && options.hasOwnProperty('partial_failure')) {
                if (!request.setPartialFailure) {
                    throw new Error(`This method does not support the partial_failure option.`);
                }
                request.setPartialFailure(options.partial_failure);
            }
            const response = yield this.service.dismissRecommendation(request);
            return {
                request: request.toObject(),
                partial_failure_error: response.partialFailureError,
                results: response.resultsList.map(r => r.resourceName),
            };
        });
    }
}
exports.default = RecommendationService;
